
contract Refinement {

    struct StateOld {
        mapping (uint256 => address) _tokenOwner;
        mapping (uint256 => address) _tokenApprovals;
        mapping (address => uint256) _ownedTokensCount;
        mapping (address => mapping (address => bool)) _operatorApprovals;
    }

    struct StateNew {
        mapping (uint256 => address) _tokenOwner;
        mapping (uint256 => address) _tokenApprovals;
        mapping (address => uint256) _ownedTokensCount;
        mapping (address => mapping (address => bool)) _operatorApprovals;
    }

    StateOld od;
    StateOld od_old;
    StateNew nw;
    StateNew nw_old;


    /// @notice precondition od._ownedTokensCount[owner] == balance
    $balanceOf
    function balanceOf_post(address owner) public view returns (uint256 balance);

    /// @notice precondition od._tokenOwner[tokenId] == _owner
    /// @notice precondition  _owner !=  address(0)
    $ownerOf
    function ownerOf_post(uint256 tokenId) public view returns (address owner);

    /// @notice precondition od._tokenApprovals[tokenId] == to 
    $approve
    function approve_post(address to, uint256 tokenId) public;

    /// @notice precondition od._tokenOwner[tokenId] != address(0)
    /// @notice precondition od._tokenApprovals[tokenId] == approved
    $getApproved
    function getApproved_post(uint256 tokenId) public view returns (address operator);

    /// @notice precondition od._operatorApprovals[msg.sender][to] == approved
    $setApprovalForAll
    function setApprovalForAll_post(address operator, bool _approved) public;

    /// @notice precondition od._operatorApprovals[owner][operator] == approved
    $isApprovedForAll
    function isApprovedForAll_post(address owner, address operator) public view returns (bool);

    /// @notice  precondition ( ( od._ownedTokensCount[from] ==  od_old._ownedTokensCount[from] - 1  &&  from  != to ) || ( from == to )  ) 
    /// @notice  precondition ( ( od._ownedTokensCount[to] ==  od_old._ownedTokensCount[to] + 1  &&  from  != to ) || ( from  == to ) )
    /// @notice  precondition  od._tokenOwner[tokenId] == to
    $transferFrom
    function transferFrom_post(address from, address to, uint256 tokenId) public;

    /// @notice  precondition ( ( od._ownedTokensCount[from] ==  od_old._ownedTokensCount[from] - 1  &&  from  != to ) || ( from == to )  ) 
    /// @notice  precondition ( ( od._ownedTokensCount[to] ==  od_old._ownedTokensCount[to] + 1  &&  from  != to ) || ( from  == to ) )
    /// @notice  precondition  od._tokenOwner[tokenId] == to
    $safeTransferFrom3
    function safeTransferFrom_post(address from, address to, uint256 tokenId) public;

    /// @notice  precondition ( ( od._ownedTokensCount[from] ==  od_old._ownedTokensCount[from] - 1  &&  from  != to ) || ( from == to )  ) 
    /// @notice  precondition ( ( od._ownedTokensCount[to] ==  od_old._ownedTokensCount[to] + 1  &&  from  != to ) || ( from  == to ) )
    /// @notice  precondition  od._tokenOwner[tokenId] == to
    $safeTransferFrom4
    function safeTransferFrom_post(address from, address to, uint256 tokenId, bytes memory data) public;


}
