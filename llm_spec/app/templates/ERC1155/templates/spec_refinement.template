
contract Refinement {

    struct StateOld {
        mapping (uint256 => mapping(address => uint256)) private _balances;
        mapping (address => mapping(address => bool)) private _operatorApprovals;
    }

    struct StateNew {
        mapping (uint256 => mapping(address => uint256)) private _balances;
        mapping (address => mapping(address => bool)) private _operatorApprovals;
    }

    StateOld od;
    StateOld od_old;
    StateNew nw;
    StateNew nw_old;

    /// @notice precondition od._balances[id][account] == balance
     $balanceOf
    function balanceOf_post(address account, uint256 id) public view   returns (uint256 balance);

    
    /// @notice precondition batchBalances.length == accounts.length 
    /// @notice precondition batchBalances.length == ids.length
    /// @notice precondition forall (uint x) !( 0 <= x &&  x < batchBalances.length ) || batchBalances[x] == od._balances[ids[x]][accounts[x]]  
    $balanceOfBatch
    function balanceOfBatch_post(
        address[] memory accounts,
        uint256[] memory ids
    )
        public
        view
        returns (uint256[] memory batchBalances);

    
    /// @notice  precondition od._operatorApprovals[msg.sender][operator] ==  approved 
    /// @notice  emits  ApprovalForAll
    $setApprovalForAll
    function setApprovalForAll_post(address operator, bool approved) public;

    /// @notice precondition od._operatorApprovals[account][operator] == approved
    $isApprovedForAll
    function isApprovedForAll_post(address account, address operator) public view   returns (bool approved);

    /// @notice precondition from != msg.sender
    /// @notice precondition !od._operatorApprovals[from][msg.sender]
    /// @notice precondition to != address(0) 
    /// @notice precondition od._operatorApprovals[from][msg.sender] || from == msg.sender
    /// @notice precondition od_old._balances[id][from] >= amount    
    /// @notice precondition od._balances[id][from] == od_old._balances[id][from] - amount
    /// @notice precondition od._balances[id][to] == od_old._balances[id][to] + amount
    $safeTransferFrom
    function safeTransferFrom_post(
        address from,
        address to,
        uint256 id,
        uint256 amount,
        bytes memory data
    )
        public;


    /// @notice precondition od._operatorApprovals[from][msg.sender] || from == msg.sender
    /// @notice precondition to != address(0)
    $safeBatchTransferFrom
    function safeBatchTransferFrom_post(
        address from,
        address to,
        uint256[] memory ids,
        uint256[] memory amounts,
        bytes memory data
    )
        public;


}
