Task:
- You are given a smart contract interface and need to add formal verification conditions for each function.
- Read the ERC documentation to understand the contract's behavior.
- For each function, add postconditions by replacing "$ADD POSTCONDITION HERE" with one or more appropriate postconditions.
- Use the solc-verify syntax: /// @notice postcondition [condition]

Requirements:
- Each function must have appropriate postconditions
- Conditions must correctly represent the expected behavior per the ERC standard
- Conditions for all functions must be consistent with each other
- Annotate with postconditions above each function

Verification Guidelines:
- Use ONLY state variables exactly as declared in the contract (_balances, _allowed, _totalSupply)
- Use ONLY parameter names exactly as they appear in function signatures (_to, _from, _value, etc.)
- DO NOT create short variable names like 'bal', 't', 's', 'u', 'v', or 'rem'
- For referencing previous state values, use __verifier_old_uint(stateVariable)
- For functions that return success, handle both success and failure cases: (condition && success) || !success
- For self-transfers, add special handling when sender == recipient
- View functions should relate return values directly to state variables
- Ensure consistency between related functions (e.g., transfer and transferFrom)

Your task is to annotate this contract with proper solc-verify postconditions: