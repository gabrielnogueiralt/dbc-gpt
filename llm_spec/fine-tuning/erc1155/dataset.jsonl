{"messages": [{"role": "system", "content": "You are a coding assistant specialized in generating formal postconditions for ERC1155 interface with solc-verify postconditions annotations."},{"role": "user", "content": "/**\n * @notice Get the balance of an account's tokens.\n * @param _owner  The address of the token holder\n * @param _id     ID of the token\n * @return        The _owner's balance of the token type requested\n*/\nfunction balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);"},{"role": "assistant", "content": "/// @notice postcondition _balances[_id][_owner] == balance\nfunction balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);"}]}
{"messages": [{"role": "system", "content": "You are a coding assistant specialized in generating formal postconditions for ERC1155 interface with solc-verify postconditions annotations."},{"role": "user", "content": "/**\n * @notice Get the balance of multiple account/token pairs\n * @param _owners The addresses of the token holders\n * @param _ids    ID of the tokens\n * @return        The _owner's balance of the token types requested (i.e. balance for each (owner, id) pair)\n*/\nfunction balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);"},{"role": "assistant", "content": "/// @notice postcondition batchBalances.length == _owners.length\n/// @notice postcondition batchBalances.length == _ids.length\n/// @notice postcondition forall (uint x) !(0 <= x && x < batchBalances.length) || batchBalances[x] == _balances[_ids[x]][_owners[x]]\nfunction balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);"}]}
{"messages": [{"role": "system", "content": "You are a coding assistant specialized in generating formal postconditions for ERC1155 interface with solc-verify postconditions annotations."},{"role": "user", "content": "/**\n * @notice Enable or disable approval for a third party (\"operator\") to manage all of the caller's tokens.\n * @param _operator Address to add to the set of authorized operators\n * @param _approved True if the operator is approved, false to revoke approval\n*/\nfunction setApprovalForAll(address _operator, bool _approved) public;"},{"role": "assistant", "content": "/// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved\nfunction setApprovalForAll(address _operator, bool _approved) public;"}]}
{"messages": [{"role": "system", "content": "You are a coding assistant specialized in generating formal postconditions for ERC1155 interface with solc-verify postconditions annotations."},{"role": "user", "content": "/**\n * @notice Queries the approval status of an operator for a given owner.\n * @param _owner     The owner of the tokens\n * @param _operator  Address of authorized operator\n * @return           True if the operator is approved, false if not\n*/\nfunction isApprovedForAll(address _owner, address _operator) public view returns (bool approved);"},{"role": "assistant", "content": "/// @notice postcondition _operatorApprovals[_owner][_operator] == approved\nfunction isApprovedForAll(address _owner, address _operator) public view returns (bool approved);"}]}
{"messages": [{"role": "system", "content": "You are a coding assistant specialized in generating formal postconditions for ERC1155 interface with solc-verify postconditions annotations."},{"role": "user", "content": "/**\n * @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\n * @param _from    Source address\n * @param _to      Target address\n * @param _id      ID of the token type\n * @param _value   Transfer amount\n * @param _data    Additional data\n*/\nfunction safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;"},{"role": "assistant", "content": "/// @notice postcondition _to != address(0)\n/// @notice postcondition _operatorApprovals[_from][msg.sender] || _from == msg.sender\n/// @notice postcondition __verifier_old_uint(_balances[_id][_from]) >= _value\n/// @notice postcondition _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value\n/// @notice postcondition _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value\nfunction safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;"}]}
{"messages": [{"role": "system", "content": "You are a coding assistant specialized in generating formal postconditions for ERC1155 interface with solc-verify postconditions annotations."},{"role": "user", "content": "/**\n * @notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\n * @param _from    Source address\n * @param _to      Target address\n * @param _ids     IDs of each token type (order and length must match _values array)\n * @param _values  Transfer amounts per token type (order and length must match _ids array)\n * @param _data    Additional data\n*/\nfunction safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values, bytes memory _data) public;"},{"role": "assistant", "content": "/// @notice postcondition _operatorApprovals[_from][msg.sender] || _from == msg.sender\n/// @notice postcondition _to != address(0)\nfunction safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values, bytes memory _data) public;"}]}