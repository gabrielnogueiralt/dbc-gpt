{"messages": [{"role": "system", "content": "You are a coding assistant specialized in generating formal postconditions for ERC interface with solc-verify postconditions annotations."},{"role": "user", "content": "/**\n * Returns the total token supply.\n * @return The total token supply\n*/\nfunction totalSupply() public view returns (uint256 supply);"},{"role": "assistant", "content": "/// @notice postcondition supply == _totalSupply\nfunction totalSupply() public view returns (uint256 supply);"}]}
{"messages": [{"role": "system", "content": "You are a coding assistant specialized in generating formal postconditions for ERC interface with solc-verify postconditions annotations."},{"role": "user", "content": "/**\n * Transfers `_value` amount of tokens to address `_to`, and MUST fire the `Transfer` event.\n * @param _to The address to transfer tokens to\n * @param _value The amount of tokens to be transferred\n * @return True if the transfer was successful\n*/\nfunction transfer(address _to, uint256 _value) public returns (bool success);"},{"role": "assistant", "content": "/// @notice postcondition ( _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && msg.sender != _to )\n/// @notice postcondition ( _balances[_to] == __verifier_old_uint(_balances[_to]) + _value && msg.sender != _to )\nfunction transfer(address _to, uint256 _value) public returns (bool success);"}]}
{"messages": [{"role": "system", "content": "You are a coding assistant specialized in generating formal postconditions for ERC interface with solc-verify postconditions annotations."},{"role": "user", "content": "/**\n * Transfers `_value` amount of tokens from address `_from` to address `_to`, and MUST fire the `Transfer` event.\n * The `transferFrom` method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf.\n * @param _from The current owner of the tokens\n * @param _to The address to transfer tokens to\n * @param _value The amount of tokens to transfer\n * @return True if the transfer was successful\n*/\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);"},{"role": "assistant", "content": "/// @notice postcondition ( _balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _from != _to ) || (_balances[_from] == __verifier_old_uint(_balances[_from]) && _from == _to)\n/// @notice postcondition ( _balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _from != _to ) || (_balances[_to] == __verifier_old_uint(_balances[_to]) && _from == _to)\n/// @notice postcondition _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);"}]}
{"messages": [{"role": "system", "content": "You are a coding assistant specialized in generating formal postconditions for ERC interface with solc-verify postconditions annotations."},{"role": "user", "content": "/**\n * Allows `_spender` to withdraw from your account multiple times, up to the `_value` amount.\n * If this function is called again it overwrites the current allowance with `_value`.\n * @param _spender The address authorized to spend\n * @param _value The maximum amount they can spend\n * @return True if the operation was successful\n*/\nfunction approve(address _spender, uint256 _value) public returns (bool success);"},{"role": "assistant", "content": "/// @notice postcondition (_allowed[msg.sender][_spender] == _value && success) || (_allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && !success)\nfunction approve(address _spender, uint256 _value) public returns (bool success);"}]}
{"messages": [{"role": "system", "content": "You are a coding assistant specialized in generating formal postconditions for ERC interface with solc-verify postconditions annotations."},{"role": "user", "content": "/**\n * Returns the account balance of another account with address `_owner`.\n * @param _owner The address of the account to query\n * @return The account balance\n*/\nfunction balanceOf(address _owner) public view returns (uint256 balance);"},{"role": "assistant", "content": "/// @notice postcondition _balances[_owner] == balance\nfunction balanceOf(address _owner) public view returns (uint256 balance);"}]}
{"messages": [{"role": "system", "content": "You are a coding assistant specialized in generating formal postconditions for ERC interface with solc-verify postconditions annotations."},{"role": "user", "content": "/**\n * Returns the amount which `_spender` is still allowed to withdraw from `_owner`.\n * @param _owner The address of the account owning funds\n * @param _spender The address authorized to spend\n * @return The remaining amount allowed\n*/\nfunction allowance(address _owner, address _spender) public view returns (uint256 remaining);"},{"role": "assistant", "content": "/// @notice postcondition _allowed[_owner][_spender] == remaining\nfunction allowance(address _owner, address _spender) public view returns (uint256 remaining);"}]}